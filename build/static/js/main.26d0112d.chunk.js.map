{"version":3,"sources":["config/env.js","Auth.js","NavBar/NavBar.js","Questions/Questions.js","Question/SubmitAnswer.js","Question/Question.js","Callback.js","NewQuestion/NewQuestion.js","SecuredRoute/SecuredRoute.js","App.js","serviceWorker.js","index.js"],"names":["config","URL","auth0Client","Auth","Object","classCallCheck","this","url","auth0","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","idToken","Date","getTime","expiresAt","authorize","_this","Promise","resolve","reject","parseHash","err","authResult","idTokenPayload","expiresIn","withRouter","props","react_default","a","createElement","className","Link","to","onClick","name","history","replace","Questions","possibleConstructorReturn","getPrototypeOf","call","state","questions","axios","get","data","setState","map","question","key","id","concat","answers","title","description","Component","SubmitAnswer","answer","value","submitAnswer","_this2","react","htmlFor","type","onChange","e","updateAnswer","target","placeholder","submit","Question","assertThisInitialized","refreshQuestion","params","match","questionId","post","headers","Authorization","getIdToken","Question_SubmitAnswer","idx","Callback","NewQuestion","disabled","push","onBlur","updateTitle","updateDescription","SecuredRoute","component","path","Route","render","App","NavBar_NavBar","exact","SecuredRoute_SecuredRoute","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26d0112d.chunk.js","sourcesContent":["export const config = {\r\n\tURL: \"http://localhost:8081\"\r\n};\r\n","import auth0 from 'auth0-js';\r\nimport { config } from './config/env.js';\r\n\r\nclass Auth {\r\n  constructor() {\r\n    let url = config.URL;\r\n    this.auth0 = new auth0.WebAuth({\r\n      // the following three lines MUST be updated\r\n      domain: 'theclcode.auth0.com',\r\n      audience: 'https://theclcode.auth0.com/userinfo',\r\n      clientID: 'OYUdtZYPSdUH4I67QEvKC4CPWo5HiqVg',\r\n      redirectUri: url + '/callback',\r\n      responseType: 'token id_token',\r\n      scope: 'openid profile'\r\n    });\r\n\r\n    this.getProfile = this.getProfile.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.signIn = this.signIn.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n\r\n  getProfile() {\r\n    return this.profile;\r\n  }\r\n\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return new Date().getTime() < this.expiresAt;\r\n  }\r\n\r\n  signIn() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        if (err) return reject(err);\r\n        if (!authResult || !authResult.idToken) {\r\n          return reject(err);\r\n        }\r\n        this.idToken = authResult.idToken;\r\n        this.profile = authResult.idTokenPayload;\r\n        // set the time that the id token will expire at\r\n        this.expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n\r\n  signOut() {\r\n    // clear id token, profile, and expiration\r\n    this.idToken = null;\r\n    this.profile = null;\r\n    this.expiresAt = null;\r\n  }\r\n}\r\n\r\nconst auth0Client = new Auth();\r\n\r\nexport default auth0Client;","import React from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\n\r\nfunction NavBar(props) {\r\n  const signOut = () => {\r\n    auth0Client.signOut();\r\n    props.history.replace('/');\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary fixed-top\">\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Q&App\r\n      </Link>\r\n      {\r\n        !auth0Client.isAuthenticated() &&\r\n        <button className=\"btn btn-dark\" onClick={auth0Client.signIn}>Sign In</button>\r\n      }\r\n      {\r\n        auth0Client.isAuthenticated() &&\r\n        <div>\r\n          <label className=\"mr-2 text-white\">{auth0Client.getProfile().name}</label>\r\n          <button className=\"btn btn-dark\" onClick={() => {signOut()}}>Sign Out</button>\r\n        </div>\r\n      }\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default withRouter(NavBar);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nclass Questions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions: null\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const questions = (await axios.get(\"http://localhost:8081/getall\")).data;\r\n    this.setState({\r\n      questions\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Link to=\"/new-question\">\r\n            <div className=\"card text-white bg-secondary mb-3\">\r\n              <div className=\"card-header\">Need help? Ask here!</div>\r\n              <div className=\"card-body\">\r\n                <h4 className=\"card-title\">+ New Question</h4>\r\n                <p className=\"card-text\">Don't worry. Help is on the way!</p>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n          {this.state.questions === null && <p>Loading questions...</p>}\r\n          {this.state.questions &&\r\n            this.state.questions.map(question => (\r\n              <div key={question.id} className=\"col-sm-12 col-md-4 col-lg-3\">\r\n                <Link to={`/question/${question.id}`}>\r\n                  <div className=\"card text-white bg-success mb-3\">\r\n                    <div className=\"card-header\">\r\n                      Answers: {question.answers}\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <h4 className=\"card-title\">{question.title}</h4>\r\n                      <p className=\"card-text\">{question.description}</p>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Questions;\r\n","import React, {Component, Fragment} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\n\r\nclass SubmitAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      answer: '',\r\n    };\r\n  }\r\n\r\n  updateAnswer(value) {\r\n    this.setState({\r\n      answer: value,\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.props.submitAnswer(this.state.answer);\r\n\r\n    this.setState({\r\n      answer: '',\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!auth0Client.isAuthenticated()) return null;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"form-group text-center\">\r\n          <label htmlFor=\"exampleInputEmail1\">Answer:</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => {this.updateAnswer(e.target.value)}}\r\n            className=\"form-control\"\r\n            placeholder=\"Share your answer.\"\r\n            value={this.state.answer}\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          onClick={() => {this.submit()}}>\r\n          Submit\r\n        </button>\r\n        <hr className=\"my-4\" />\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SubmitAnswer);","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport SubmitAnswer from './SubmitAnswer';\r\nimport auth0Client from '../Auth';\r\n\r\nclass Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: null,\r\n    };\r\n\r\n    this.submitAnswer = this.submitAnswer.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.refreshQuestion();\r\n  }\r\n\r\n  async refreshQuestion() {\r\n    const { match: { params } } = this.props;\r\n    const question = (await axios.get(`http://localhost:8081/question/${params.questionId}`)).data;\r\n    this.setState({\r\n      question,\r\n    });\r\n  }\r\n\r\n  async submitAnswer(answer) {\r\n    await axios.post(`http://localhost:8081/answer/${this.state.question.id}`, {\r\n      answer,\r\n    }, {\r\n      headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\r\n    });\r\n    await this.refreshQuestion();\r\n  }\r\n\r\n  render() {\r\n    const {question} = this.state;\r\n    if (question === null) return <p>Loading ...</p>;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"jumbotron col-12\">\r\n            <h1 className=\"display-3\">{question.title}</h1>\r\n            <p className=\"lead\">{question.description}</p>\r\n            <hr className=\"my-4\" />\r\n            <SubmitAnswer questionId={question.id} submitAnswer={this.submitAnswer} />\r\n            <p>Answers:</p>\r\n            {\r\n              question.answers.map((answer, idx) => (\r\n                <p className=\"lead\" key={idx}>{answer.answer}</p>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from './Auth';\r\n\r\nclass Callback extends Component {\r\n  async componentDidMount() {\r\n    await auth0Client.handleAuthentication();\r\n    this.props.history.replace('/');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <p>Loading profile...</p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Callback);","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\nimport axios from 'axios';\r\n\r\nclass NewQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      disabled: false,\r\n      title: '',\r\n      description: '',\r\n    };\r\n  }\r\n\r\n  updateDescription(value) {\r\n    this.setState({\r\n      description: value,\r\n    });\r\n  }\r\n\r\n  updateTitle(value) {\r\n    this.setState({\r\n      title: value,\r\n    });\r\n  }\r\n\r\n  async submit() {\r\n    this.setState({\r\n      disabled: true,\r\n    });\r\n\r\n    await axios.post('http://localhost:8081', {\r\n      title: this.state.title,\r\n      description: this.state.description,\r\n    }, {\r\n      headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\r\n    });\r\n\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"card border-primary\">\r\n              <div className=\"card-header\">New Question</div>\r\n              <div className=\"card-body text-left\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"exampleInputEmail1\">Title:</label>\r\n                  <input\r\n                    disabled={this.state.disabled}\r\n                    type=\"text\"\r\n                    onBlur={(e) => {this.updateTitle(e.target.value)}}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Give your question a title.\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"exampleInputEmail1\">Description:</label>\r\n                  <input\r\n                    disabled={this.state.disabled}\r\n                    type=\"text\"\r\n                    onBlur={(e) => {this.updateDescription(e.target.value)}}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Give more context to your question.\"\r\n                  />\r\n                </div>\r\n                <button\r\n                  disabled={this.state.disabled}\r\n                  className=\"btn btn-primary\"\r\n                  onClick={() => {this.submit()}}>\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(NewQuestion);","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\n\r\nfunction SecuredRoute(props) {\r\n  const {component: Component, path} = props;\r\n  return (\r\n    <Route path={path} render={() => {\r\n        if (!auth0Client.isAuthenticated()) {\r\n          auth0Client.signIn();\r\n          return <div></div>;\r\n        }\r\n        return <Component />\r\n    }} />\r\n  );\r\n}\r\n\r\nexport default SecuredRoute;","import React, { Component } from 'react';\r\nimport NavBar from './NavBar/NavBar';\r\nimport Questions from './Questions/Questions';\r\nimport Question from './Question/Question';\r\nimport Callback from './Callback';\r\nimport {Route} from 'react-router-dom';\r\nimport NewQuestion from './NewQuestion/NewQuestion';\r\nimport SecuredRoute from './SecuredRoute/SecuredRoute';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (<div>\r\n      <NavBar/>\r\n      <Route exact path='/' component={Questions}/>\r\n      <Route exact path='/question/:questionId' component={Question}/>\r\n      <Route exact path='/callback' component={Callback}/>\r\n      <SecuredRoute path='/new-question' component={NewQuestion} />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}